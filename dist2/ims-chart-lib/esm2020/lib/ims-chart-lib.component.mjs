import { Component, ViewChild, ViewEncapsulation } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@angular/router";
import * as i3 from "./services/masterRepoService";
import * as i4 from "./services/decleration-master.service";
import * as i5 from "@angular/common";
import * as i6 from "./charts/ims-chart.component";
// export class ImsChartLibComponent {
// }
export class ImsChartLibComponent {
    constructor(http, router, masterService, declerationService) {
        this.http = http;
        this.router = router;
        this.masterService = masterService;
        this.declerationService = declerationService;
        this.newData = [];
        this.dataforloop = [];
        this.callChartSelector = false;
        this.option1 = {
            responsive: true,
            maintainAspectRatio: true,
            plugins: {
                legend: {
                    display: false
                }
            },
            scales: {
                x: {
                    grid: {
                        display: false
                    }
                },
            }
        };
        this.http.get("./appConfig.json")
            .subscribe((data) => {
            localStorage.setItem("ims-chartApiUrl", data.apiUrl);
        });
        this.dashboardmaindata();
    }
    ChooseColSpan(value) {
        this.declerationService.ColSpanValue = value.target.value;
        console.log('changecol', this.declerationService.ColSpanValue);
        //  this.chartComp.ChooseColSpan();
    }
    getChartData(index) {
        return this.dataforloop[index + 1];
    }
    dashboardmaindata() {
        this.masterService.DashboardData().subscribe((mainData) => {
            this.dataforloop = mainData;
            this.callChartSelector = true;
            console.log('this.dataforloop', this.dataforloop, this.callChartSelector);
            // DATA CONVERSION
            let getccdata = [];
            mainData.map((p) => {
                getccdata.push(p.ccdata);
                // this.declerationService.ColSpanValue=(p.colSpan)
            });
            console.log('this.getccdata', getccdata);
            getccdata.forEach((element) => {
                for (let i of element) {
                    i.value = i.STOCK;
                    i.group = i.ACNAME;
                    i.label = i.label;
                    i.category = i.category;
                }
                this.declerationService.Dataforchart.push(element);
            });
            console.log('this.Dataforchart', this.declerationService.Dataforchart);
        });
    }
}
ImsChartLibComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ImsChartLibComponent, deps: [{ token: i1.HttpClient }, { token: i2.Router }, { token: i3.MasterService }, { token: i4.DeclerationMasterService }], target: i0.ɵɵFactoryTarget.Component });
ImsChartLibComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: ImsChartLibComponent, selector: "lib-imsChartLib", viewQueries: [{ propertyName: "chartComp", first: true, predicate: ["imschart"], descendants: true }], ngImport: i0, template: "<div class=\"home_content\">\r\n    <div class=\"dashboardContents\">\r\n      <div class=\"row mainDashboardFirstWrapper\" style=\"margin: 0;\">\r\n        <ng-container  >\r\n          <ng-container *ngFor=\"let data of dataforloop; let i = index \">\r\n              <div  *ngIf=\"this.declerationService.ColSpanValue[i]\" class=\"col-lg-{{this.declerationService.ColSpanValue[i]}}\">\r\n              <div class=\"bar-chart-container \">\r\n                <div class=\"chartsheading\">\r\n                  <div class=\"left\">\r\n                    <h5 >{{data.title}}  </h5>\r\n                  \r\n                  </div>\r\n            \r\n                </div>\r\n    \r\n                <ims-charts  [colSpan]=\"data.colSpan\" [index]=\"i\" [ChartType]=\"data.chartType\" [chartData]=\"this.declerationService.Dataforchart[data.canvasId]\" [canvasId]=\"data.canvasId\" [options]=\"option1\" style=\"width: 100%\"></ims-charts>\r\n  \r\n              </div>\r\n            </div>\r\n            <div  *ngIf=\"!this.declerationService.ColSpanValue[i]\"class=\"col-lg-{{data.colSpan}}\">\r\n              <div class=\"bar-chart-container \">\r\n                <div class=\"chartsheading\">\r\n  \r\n                 \r\n                  <div class=\"left\">\r\n                    <h5 >{{data.title}}  </h5>\r\n                    <!-- <h5>{{data.colSpan}}</h5> -->\r\n                  <!-- <input type=\"text\"  (change)=\"ChooseColSpan($event)\" [(ngModel)]=\"data.colSpan\"> -->\r\n                  </div>\r\n            \r\n                </div>\r\n    \r\n                <ims-charts   [index]=\"i\" [ChartType]=\"data.chartType\" [chartData]=\"this.declerationService.Dataforchart[data.canvasId]\" [canvasId]=\"data.canvasId\" [options]=\"option1\" style=\"width: 100%\"></ims-charts>\r\n  \r\n              </div>\r\n            </div>\r\n          </ng-container>\r\n        </ng-container>\r\n      </div>\r\n  \r\n    </div>\r\n  </div>", styles: [".dashboardContents{margin-top:30px}@media screen and (max-width: 767px){.dashboardContents{margin-top:40px}}.dashboardContents .bar-chart-container{padding:15px;border-radius:5px;background-color:#f3f3f3}.dashboardContents .bar-chart-container .chartsheading{display:flex;justify-content:space-between}\n"], dependencies: [{ kind: "directive", type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i6.imsCharts, selector: "ims-charts", inputs: ["myinputMsg", "chartname", "ChartType", "colSpan", "canvasId", "index", "chartData", "options", "barLine"] }], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ImsChartLibComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-imsChartLib', encapsulation: ViewEncapsulation.None, template: "<div class=\"home_content\">\r\n    <div class=\"dashboardContents\">\r\n      <div class=\"row mainDashboardFirstWrapper\" style=\"margin: 0;\">\r\n        <ng-container  >\r\n          <ng-container *ngFor=\"let data of dataforloop; let i = index \">\r\n              <div  *ngIf=\"this.declerationService.ColSpanValue[i]\" class=\"col-lg-{{this.declerationService.ColSpanValue[i]}}\">\r\n              <div class=\"bar-chart-container \">\r\n                <div class=\"chartsheading\">\r\n                  <div class=\"left\">\r\n                    <h5 >{{data.title}}  </h5>\r\n                  \r\n                  </div>\r\n            \r\n                </div>\r\n    \r\n                <ims-charts  [colSpan]=\"data.colSpan\" [index]=\"i\" [ChartType]=\"data.chartType\" [chartData]=\"this.declerationService.Dataforchart[data.canvasId]\" [canvasId]=\"data.canvasId\" [options]=\"option1\" style=\"width: 100%\"></ims-charts>\r\n  \r\n              </div>\r\n            </div>\r\n            <div  *ngIf=\"!this.declerationService.ColSpanValue[i]\"class=\"col-lg-{{data.colSpan}}\">\r\n              <div class=\"bar-chart-container \">\r\n                <div class=\"chartsheading\">\r\n  \r\n                 \r\n                  <div class=\"left\">\r\n                    <h5 >{{data.title}}  </h5>\r\n                    <!-- <h5>{{data.colSpan}}</h5> -->\r\n                  <!-- <input type=\"text\"  (change)=\"ChooseColSpan($event)\" [(ngModel)]=\"data.colSpan\"> -->\r\n                  </div>\r\n            \r\n                </div>\r\n    \r\n                <ims-charts   [index]=\"i\" [ChartType]=\"data.chartType\" [chartData]=\"this.declerationService.Dataforchart[data.canvasId]\" [canvasId]=\"data.canvasId\" [options]=\"option1\" style=\"width: 100%\"></ims-charts>\r\n  \r\n              </div>\r\n            </div>\r\n          </ng-container>\r\n        </ng-container>\r\n      </div>\r\n  \r\n    </div>\r\n  </div>", styles: [".dashboardContents{margin-top:30px}@media screen and (max-width: 767px){.dashboardContents{margin-top:40px}}.dashboardContents .bar-chart-container{padding:15px;border-radius:5px;background-color:#f3f3f3}.dashboardContents .bar-chart-container .chartsheading{display:flex;justify-content:space-between}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: i2.Router }, { type: i3.MasterService }, { type: i4.DeclerationMasterService }]; }, propDecorators: { chartComp: [{
                type: ViewChild,
                args: ['imschart']
            }] } });
//# sourceMappingURL=data:application/json;base64,